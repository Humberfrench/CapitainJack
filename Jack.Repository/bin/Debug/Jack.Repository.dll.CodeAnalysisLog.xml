<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Targets>
  <Target Name="C:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\bin\Debug\Jack.Repository.dll">
   <Modules>
    <Module Name="jack.repository.dll">
     <Namespaces>
      <Namespace Name="Jack.Repository.UnityOfWork">
       <Types>
        <Type Name="NHibernateHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHibernateHelper.cs" Line="38">'NHibernateHelper.NHibernateHelper()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CloseSession(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHibernateHelper.cs" Line="86">'NHibernateHelper.CloseSession(Assembly)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCurrentSession(System.Reflection.Assembly)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHibernateHelper.cs" Line="65">'NHibernateHelper.GetCurrentSession(Assembly)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NhProvider`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="69">'NhProvider&lt;TClassName, TClassId&gt;.Add(TClassName)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Del(!0&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="270">'NhProvider&lt;TClassName, TClassId&gt;.Del(ref TClassName)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(!1)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="167">'NhProvider&lt;TClassName, TClassId&gt;.Get(TClassId)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#List()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="221">'NhProvider&lt;TClassName, TClassId&gt;.List()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadByQuery(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="318">'NhProvider&lt;TClassName, TClassId&gt;.LoadByQuery(string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Update(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2017-02-22 21:16:04Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\humberto.almeida.ext\Documents\Visual Studio 2013\Projects\Jack\Jack.Repository\UnityOfWork" File="NHProvider.cs" Line="118">'NhProvider&lt;TClassName, TClassId&gt;.Update(TClassName)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
